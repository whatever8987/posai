"""
Insight model for storing automated business insights
"""
from sqlalchemy import Column, String, DateTime, Text, Enum as SQLEnum, JSON, Integer, Float
from sqlalchemy.dialects.postgresql import UUID
from datetime import datetime
import uuid
import enum

from ..core.database import Base


class InsightType(str, enum.Enum):
    """Types of automated insights"""
    LOW_INVENTORY = "low_inventory"
    BOOKING_TREND = "booking_trend"
    REVENUE_ANOMALY = "revenue_anomaly"
    CUSTOMER_CHURN = "customer_churn"
    PEAK_HOURS = "peak_hours"
    STAFF_PERFORMANCE = "staff_performance"
    SERVICE_POPULARITY = "service_popularity"
    PAYMENT_PATTERN = "payment_pattern"
    NO_SHOW_RATE = "no_show_rate"


class InsightSeverity(str, enum.Enum):
    """Severity levels for insights"""
    INFO = "info"           # Informational
    LOW = "low"             # Minor attention needed
    MEDIUM = "medium"       # Should address soon
    HIGH = "high"           # Urgent action required
    CRITICAL = "critical"   # Immediate action required


class InsightStatus(str, enum.Enum):
    """Status of insight"""
    NEW = "new"                 # Just generated
    VIEWED = "viewed"           # User has seen it
    ACKNOWLEDGED = "acknowledged"  # User acknowledged
    RESOLVED = "resolved"       # Issue resolved
    DISMISSED = "dismissed"     # User dismissed


class Insight(Base):
    """
    Automated business insight model
    
    Stores insights generated by the insight engine for each tenant
    """
    __tablename__ = "insights"
    
    insight_id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    tenant_id = Column(UUID(as_uuid=True), nullable=False, index=True)
    
    # Insight classification
    type = Column(SQLEnum(InsightType), nullable=False, index=True)
    severity = Column(SQLEnum(InsightSeverity), nullable=False, default=InsightSeverity.INFO)
    status = Column(SQLEnum(InsightStatus), nullable=False, default=InsightStatus.NEW, index=True)
    
    # Content
    title = Column(String(255), nullable=False)
    description = Column(Text, nullable=False)
    recommendation = Column(Text)  # Actionable recommendation
    
    # Metrics and data
    metrics = Column(JSON)  # Relevant numbers/stats
    affected_entities = Column(JSON)  # IDs of affected customers, products, etc.
    
    # Comparison data
    current_value = Column(Float)
    previous_value = Column(Float)
    change_percent = Column(Float)
    
    # Timestamps
    generated_at = Column(DateTime, default=datetime.utcnow, nullable=False, index=True)
    viewed_at = Column(DateTime)
    resolved_at = Column(DateTime)
    
    # Metadata
    data_source = Column(String(100))  # Which check generated this
    confidence_score = Column(Float)   # How confident the engine is (0-1)
    
    def __repr__(self):
        return f"<Insight {self.type} - {self.severity} - {self.title}>"
    
    def to_dict(self):
        """Convert to dictionary for API responses"""
        return {
            "insight_id": str(self.insight_id),
            "tenant_id": str(self.tenant_id),
            "type": self.type.value,
            "severity": self.severity.value,
            "status": self.status.value,
            "title": self.title,
            "description": self.description,
            "recommendation": self.recommendation,
            "metrics": self.metrics,
            "affected_entities": self.affected_entities,
            "current_value": self.current_value,
            "previous_value": self.previous_value,
            "change_percent": self.change_percent,
            "generated_at": self.generated_at.isoformat() if self.generated_at else None,
            "viewed_at": self.viewed_at.isoformat() if self.viewed_at else None,
            "resolved_at": self.resolved_at.isoformat() if self.resolved_at else None,
            "data_source": self.data_source,
            "confidence_score": self.confidence_score
        }

